{
  "hash": "6bd66efb35dec9e8a75193c866e6f962",
  "result": {
    "engine": "knitr",
    "markdown": "# Utility functions {#sec-r-programming}\n\n\n## Introduzione {.unnumbered .unlisted}\n\nIn questo capitolo, esploreremo le principali funzioni di utilità in R per l'importazione di dati da file esterni e la raccolta di statistiche descrittive, fornendo una panoramica generale sui data frame.\n\n\n### Panoramica del capitolo {.unnumbered .unlisted}\n\n- Conoscere e sapere utilizzare le principali funzioni di utilità di R.\n- Sapere come importare un data set in R e esportare un data set in un file esterno.\n- Usare i percorsi relativi rispetto alla radice del progetto con `here::here()`.\n\n::: {.callout-tip collapse=true}\n## Prerequisiti\n\n- Consultare [Introduction to Data Science: Data Wrangling and Visualization with R](https://rafalab.dfci.harvard.edu/dsbook-part-1/) [@irizarry2024introduction]\n- Leggere [R for Data Science (2e)](https://r4ds.hadley.nz/) [@wickham2023r].\n:::\n\n::: {.callout-caution collapse=true title=\"Preparazione del Notebook\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::here(\"code\", \"_common.R\") |> \n  source()\n\n# Load packages\nif (!requireNamespace(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(tidyr)\n```\n:::\n\n:::\n\n\n\n## Importare dati in R con `rio::import()`\n\nPrima di analizzare i dati, è necessario importarli in R. \n\n### Il problema: Tanti Formati, un'Unica Soluzione\n\nNella ricerca psicologica i dati possono essere forniti in molti formati:\n\n- File Excel (`.xlsx`) da questionari compilati in laboratorio,\n- CSV (`.csv`) da piattaforme online come Qualtrics,\n- File SPSS (`.sav`) per confrontare studi precedenti,\n- Solo testo (`.txt`) da esperimenti comportamentali.\n\nInvece di imparare funzioni diverse, una specifica per ciascun formato, il pacchetto **rio** offre **un solo comando universale** per le importazioni.\n\n### Come Funziona `import()`\n\n```r\n# Carica il pacchetto (installalo prima con install.packages(\"rio\"))\nlibrary(rio)\n\n# Importa un file CSV da una cartella \"dati\" nel tuo progetto\nrisposte <- rio::import(\"dati/questionario.csv\")\n\n# Importa un foglio Excel con i tempi di reazione\ntempi_reazione <- rio::import(\"dati/esperimento1.xlsx\")\n\n# Importa un file SPSS con dati demografici\ndati_demografici <- rio::import(\"dati/partecipanti.sav\")\n```\n\n**Perché è utile:**\n\n1. riconosce **automaticamente** il formato dal nome del file;\n2. traduce i dati in un formato R pronto per l'analisi (`data.frame`);\n3. conserva le etichette delle variabili (cruciale per questionari!).\n\n### Esportare Dati con `rio::export()`\n\nDopo aver pulito i dati, è possibile salvarli in qualsiasi formato usando `rio::export()`:\n\n```r\nrio::export(risposte, \"dati/cleaned/dati_puliti.xlsx\")\nrio::export(tempi_reazione, \"dati/cleaned/tempi_reazione.sav\")\n```\n\n## Utilizzare Percorsi Relativi con `here::here()`\n\nQuando importiamo i dati da file esterni in R, succede spesso di commettere uno dei tre errori seguenti. Vediamo come eviarli.\n\n1. **Percatori sbagliati**  \n\n   ```r\n   # SBAGLIATO (il file non è nella cartella di lavoro)\n   import(\"questionario.csv\")  \n\n   # CORRETTO: usa percorsi relativi o il pacchetto 'here'\n   import(\"dati/raw/questionario.csv\")  \n   ```\n\n2. **File aperti in altri programmi**  \n   \"Errore: non posso aprire il file\" → Chiudi Excel/SPSS e riprova\n\n3. **Codifica caratteri strani**  \n   Se vedi � nei testi, specifica l'encoding:\n   \n   ```r\n   import(\"dati/testo.txt\", encoding = \"UTF-8\")\n   ```\n\n### Evitare Percorsi Assoluti\n\nCome vedremo meglio nel @sec-eda-proj-structure, il primo passo di un progetto di analisi dei dati è l'organizzazione dei file in cartelle con una struttura chiara:\n\n   ```\n   tuo_progetto/\n   ├── dati/\n   │   ├── raw/        # Dati originali\n   │   └── cleaned/    # Dati elaborati\n   ├── script/\n   └── rapporti/\n   ```\n\n**Tutti i file e le cartelle devono essere contenuti nella directory del progetto.**\n\nIl pacchetto **here** rende l'importazione dei dati più semplice, evitando problemi dovuti a percorsi assoluti che possono cambiare se si modifica la directory di lavoro o si sposta il progetto.\n\nLa funzione `here()` crea **percorsi relativi a partire dalla radice del progetto** (cioè dalla cartella che contiene il file `.Rproj` o da dove viene inizializzato il progetto RStudio).\n\n**Esempio di utilizzo combinato con `rio::import()`:**\n\n```r\nlibrary(rio)\nlibrary(here)\n\n# Percorso robusto al file csv\ndati <- import(here(\"data\", \"dati.csv\"))\n\n# Percorso robusto al file Excel\ndati_excel <- import(here(\"data\", \"dati.xlsx\"))\n```\n\nIn questo modo, l'importazione diventa indipendente dalla cartella di lavoro attuale e il codice sarà più facilmente condivisibile e riproducibile.\n\n**Vantaggi:**\n\n- **Semplicità**: `rio::import()` riconosce automaticamente il tipo di file.\n- **Robustezza**: `here::here()` garantisce che il percorso sia sempre corretto, indipendentemente da dove viene eseguito lo script.\n\nQuesta combinazione rende le analisi riproducibili e consente di collaborare facilmente con altri ricercatori o studenti.\n\n## Funzioni Principali e Loro Utilizzo\n\nR offre una serie di funzioni per esplorare rapidamente i dati e comprenderne la struttura prima di passare a manipolazioni più avanzate.\n\n| **Funzione** | **Descrizione** |\n|--------------|-----------------|\n| `summary()`  | Restituisce statistiche descrittive di base per ogni colonna di un data frame. Per le colonne numeriche, calcola valori come il minimo, massimo, media, mediana, primo e terzo quartile, e il numero di valori mancanti (se presenti). Per le colonne non numeriche, restituisce il tipo di dati (carattere, logico) e il conteggio delle categorie. **Esempio:** `summary(iris)` restituisce una sintesi delle colonne del dataset `iris`. |\n| `str()` e `glimpse()` | Forniscono una rappresentazione sintetica delle informazioni di un data frame, come dimensione, nomi delle colonne, tipi di dati e valori iniziali. La funzione `str()` fa parte della configurazione base di R (pacchetto `utils`), mentre `glimpse()` è inclusa in `dplyr` (pacchetto `tidyverse`). **Esempio:** `str(mtcars)` o `glimpse(mtcars)`. |\n| `head()` e `tail()` | Permettono di visualizzare rispettivamente le prime o ultime righe di un data frame. Utile per una rapida ispezione del contenuto. Si può specificare il numero di righe da mostrare (es. `head(df, 10)`), altrimenti il valore predefinito è sei righe. **Esempio:** `head(iris)` per vedere le prime righe del dataset `iris`. |\n| `View()` e `view()` | Visualizzano un data frame in una finestra grafica tipo foglio di calcolo all'interno di RStudio. La funzione `View()` è parte della configurazione base di R, mentre `view()` è un alias fornito da `tibble` (pacchetto `tidyverse`). Utile per piccoli data frame, ma poco pratico per dataset di grandi dimensioni. **Esempio:** `View(iris)` apre il dataset `iris` nel visualizzatore di RStudio. |\n| `unique()`  | Restituisce i valori unici presenti in una colonna o in un vettore. **Esempio:** `unique(iris$Species)` restituisce le specie uniche nel dataset `iris`. |\n| `names()`  | Restituisce i nomi delle colonne di un data frame. **Esempio:** `names(mtcars)` restituisce i nomi delle colonne del dataset `mtcars`. |\n| `class()`  | Indica il tipo di dato di un oggetto in R, come `numeric`, `character`, `logical`, o `data.frame`. **Esempio:** `class(iris)` restituisce `data.frame`. |\n| `length()`  | Restituisce il numero di elementi di un oggetto. Per i data frame, restituisce il numero di colonne. **Esempio:** `length(iris)` restituisce 5 (colonne). |\n| `nrow()` e `ncol()` | Restituiscono rispettivamente il numero di righe e colonne di un data frame. **Esempio:** `nrow(iris)` restituisce 150 (righe), mentre `ncol(iris)` restituisce 5 (colonne). |\n\n\n## Illustrazione\n\nImmagina di dover analizzare i dati del tuo esperimento sul sonno e la memoria, salvati nel file `msleep.csv`. La struttura del tuo progetto RStudio è organizzata così:\n\n```\nmio_esperimento/\n├── mio_esperimento.Rproj\n├── data/\n│   └── msleep.csv\n├── script/\n│   └── analisi.R\n└── output/\n```\n\nLa prima cosa da fare è caricare i pacchetti necessari:\n\n```r\nlibrary(rio)    # Per importare i dati\nlibrary(here)   # Per gestire i percorsi in modo affidabile\n```\n\nA questo punto possiamo importare i dati:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmsleep <- rio::import(\n  here::here(  # Costruisce il percorso automaticamente\n    \"data\",    # Cartella dei dati\n    \"msleep.csv\"  # Nome del file\n  )\n)\n```\n:::\n\n\nControlli post-importazione (fondamentali!)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(msleep)\n#>                         name      genus  vore        order conservation\n#> 1                    Cheetah   Acinonyx carni    Carnivora           lc\n#> 2                 Owl monkey      Aotus  omni     Primates             \n#> 3            Mountain beaver Aplodontia herbi     Rodentia           nt\n#> 4 Greater short-tailed shrew    Blarina  omni Soricomorpha           lc\n#> 5                        Cow        Bos herbi Artiodactyla domesticated\n#> 6           Three-toed sloth   Bradypus herbi       Pilosa             \n#>   sleep_total sleep_rem sleep_cycle awake brainwt  bodywt\n#> 1        12.1        NA          NA  11.9      NA  50.000\n#> 2        17.0       1.8          NA   7.0 0.01550   0.480\n#> 3        14.4       2.4          NA   9.6      NA   1.350\n#> 4        14.9       2.3       0.133   9.1 0.00029   0.019\n#> 5         4.0       0.7       0.667  20.0 0.42300 600.000\n#> 6        14.4       2.2       0.767   9.6      NA   3.850\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstr(msleep)\n#> 'data.frame':\t83 obs. of  11 variables:\n#>  $ name        : chr  \"Cheetah\" \"Owl monkey\" \"Mountain beaver\" \"Greater short-tailed shrew\" ...\n#>  $ genus       : chr  \"Acinonyx\" \"Aotus\" \"Aplodontia\" \"Blarina\" ...\n#>  $ vore        : chr  \"carni\" \"omni\" \"herbi\" \"omni\" ...\n#>  $ order       : chr  \"Carnivora\" \"Primates\" \"Rodentia\" \"Soricomorpha\" ...\n#>  $ conservation: chr  \"lc\" \"\" \"nt\" \"lc\" ...\n#>  $ sleep_total : num  12.1 17 14.4 14.9 4 14.4 8.7 7 10.1 3 ...\n#>  $ sleep_rem   : num  NA 1.8 2.4 2.3 0.7 2.2 1.4 NA 2.9 NA ...\n#>  $ sleep_cycle : num  NA NA NA 0.133 0.667 ...\n#>  $ awake       : num  11.9 7 9.6 9.1 20 9.6 15.3 17 13.9 21 ...\n#>  $ brainwt     : num  NA 0.0155 NA 0.00029 0.423 NA NA NA 0.07 0.0982 ...\n#>  $ bodywt      : num  50 0.48 1.35 0.019 600 ...\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglimpse(msleep)\n#> Rows: 83\n#> Columns: 11\n#> $ name         <chr> \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Greater shor…\n#> $ genus        <chr> \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bos\", \"Bra…\n#> $ vore         <chr> \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi\", \"carn…\n#> $ order        <chr> \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorpha\", \"Art…\n#> $ conservation <chr> \"lc\", \"\", \"nt\", \"lc\", \"domesticated\", \"\", \"vu\", \"\", \"dome…\n#> $ sleep_total  <dbl> 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0, 5…\n#> $ sleep_rem    <dbl> NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.8, …\n#> $ sleep_cycle  <dbl> NA, NA, NA, 0.133, 0.667, 0.767, 0.383, NA, 0.333, NA, NA…\n#> $ awake        <dbl> 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9, 21.0, 1…\n#> $ brainwt      <dbl> NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.07000, 0…\n#> $ bodywt       <dbl> 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.490, 0.04…\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnames(msleep)\n#>  [1] \"name\"         \"genus\"        \"vore\"         \"order\"        \"conservation\"\n#>  [6] \"sleep_total\"  \"sleep_rem\"    \"sleep_cycle\"  \"awake\"        \"brainwt\"     \n#> [11] \"bodywt\"\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndim(msleep)\n#> [1] 83 11\n```\n:::\n\n\n**Errori comuni e soluzioni.**\n\n1. **\"File not found\"**:\n   - Verifica che:\n     - il file sia realmente in `data/`;\n     - il nome del file sia esatto (attenzione a .csv vs .CSV);\n     - **non ci siano spazi nel nome del file**.\n\n2. **Pacchetti non installati**:\n   ```r\n   # Esegui una volta\n   install.packages(\"rio\")\n   install.packages(\"here\")\n   ```\n\n3. **Progetto non aperto**:\n   - Assicurati di aver aperto il file `.Rproj` prima di iniziare.\n\n\nEsaminiamo le modalità della variabile qualitativa `vore`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nunique(msleep$vore)\n#> [1] \"carni\"   \"omni\"    \"herbi\"   \"\"        \"insecti\"\n```\n:::\n\n\nSe vogliamo la numerosità di ciascuna categoria, possiamo usare `table()`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntable(msleep$vore)\n#> \n#>           carni   herbi insecti    omni \n#>       7      19      32       5      20\n```\n:::\n\n\nSi noti che `table()` esclude i dati mancanti.\n\nStampiamo i nomi delle colonne del data frame:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnames(msleep)\n#>  [1] \"name\"         \"genus\"        \"vore\"         \"order\"        \"conservation\"\n#>  [6] \"sleep_total\"  \"sleep_rem\"    \"sleep_cycle\"  \"awake\"        \"brainwt\"     \n#> [11] \"bodywt\"\n```\n:::\n\n\nEsaminiamo il tipo di variabile della colonna `vore`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclass(msleep$vore)\n#> [1] \"character\"\n```\n:::\n\n\nLe dimensioni del data frame sono date da:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndim(msleep)\n#> [1] 83 11\n```\n:::\n\n\nladdove il primo valore è il numero di righe e il secondo valore è il numero di colonne.\n\nIl numero di elementi di un vettore è dato da:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlength(msleep$vore)\n#> [1] 83\n```\n:::\n\n\nIn alternativa, possiamo usare `nrow()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnrow(msleep)\n#> [1] 83\n```\n:::\n\n\nper il numero di righe e `ncol()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nncol(msleep)\n#> [1] 11\n```\n:::\n\n\nper il numero di colonne. In maniera equivalente:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndim(msleep)[2]\n#> [1] 11\n```\n:::\n\n\n\n::: {.callout-tip title=\"Esercizio\" collapse=\"true\"}\nIn questo esercizio, utilizzerai R per esplorare i dati raccolti con il questionario **Satisfaction With Life Scale (SWLS)** dagli studenti del tuo gruppo TPV. L'obiettivo è familiarizzare con le funzioni di base di R per caricare, visualizzare e manipolare i dati.\n\n**Parte 1: Operazioni Manuali**\n\n1. **Creazione e gestione degli oggetti in R**  \n   - Scrivi su carta i comandi R che creerebbero un oggetto chiamato `swls_scores` contenente i punteggi di 10 studenti.\n   - Quali sono le regole per assegnare un nome a un oggetto in R?\n\n2. **Visualizzazione dei dati**  \n   - Scrivi il comando R per visualizzare il contenuto dell’oggetto `swls_scores`.\n   - Come puoi visualizzare solo i primi 5 valori del vettore?\n\n3. **Esplorazione della struttura dei dati**  \n   - Scrivi i comandi R per verificare il tipo di dati contenuti in `swls_scores`.\n   - Come puoi verificare quanti elementi contiene?\n\n**Parte 2: Esecuzione in R**\n\n4. **Creazione del dataset in R**  \n   - Inserisci i dati in un oggetto chiamato `swls_scores` in R.\n\n5. **Verifica della struttura dei dati**  \n   - Usa le funzioni `str()`, `class()`, `length()`, `nrow()`, `ncol()` su `swls_scores`.\n   - Annota i risultati e spiega a parole loro significato.\n\n6. **Visualizzazione dei dati**  \n   - Usa `head()` e `tail()` per esplorare i dati.  \n   - Qual è la differenza tra le due funzioni?\n\n7. **Identificazione dei valori unici**  \n   - Usa `unique(swls_scores)` per individuare i punteggi distinti.\n\n8. **Creazione di una tabella con i dati**  \n   - Trasforma `swls_scores` in un data frame con una colonna `\"Punteggio\"` e una colonna `\"Studente\"` (numerata da 1 a 10).\n\n9. **Esportazione dei dati**  \n   - Salva il data frame in un file CSV chiamato `\"swls_data.csv\"` usando `write.csv()`.\n\n**Consegna**\n\n- Scrivi le risposte della **Parte 1** su carta.\n- Scrivi il codice e i risultati della **Parte 2** in un file `.R` e invialo come consegna.\n:::\n\n::: {.callout-tip title=\"Soluzione\" collapse=\"true\"}\n**Parte 1: Operazioni Manuali**\n\n1. **Creazione e gestione degli oggetti in R**  \n   - Consideriamo dei valori di risposta arbitrari. Il comando per creare l’oggetto `swls_scores` è:\n\n     ```r\n     swls_scores <- c(20, 16, 23, 25, 11, 7, 20, 25, 15, 27)\n     ```\n\n   - Regole per assegnare un nome a un oggetto in R:\n     - Non può iniziare con un numero.\n     - Non può contenere spazi o caratteri speciali (tranne `_` e `.`).\n     - Non deve avere lo stesso nome di funzioni già esistenti.\n\n2. **Visualizzazione dei dati**  \n   - Per visualizzare il contenuto:\n\n     ```r\n     swls_scores\n     ```\n\n   - Per visualizzare solo i primi 5 valori:\n\n     ```r\n     head(swls_scores, 5)\n     ```\n\n3. **Esplorazione della struttura dei dati**  \n   - Per verificare il tipo di dati:\n\n     ```r\n     class(swls_scores)\n     ```\n\n   - Per verificare il numero di elementi:\n\n     ```r\n     length(swls_scores)\n     ```\n\n**Parte 2: Esecuzione in R**\n\n4. **Creazione del dataset in R**\n   ```r\n   swls_scores <- c(20, 16, 23, 25, 11, 7, 20, 25, 15, 27)\n   ```\n\n5. **Verifica della struttura dei dati**\n   ```r\n   str(swls_scores)\n   class(swls_scores)\n   length(swls_scores)\n   ```\n\n   - `str()` mostra che `swls_scores` è un vettore numerico.\n   - `class()` conferma che è di tipo `\"numeric\"`.\n   - `length()` indica che il vettore ha 10 elementi.\n\n6. **Visualizzazione dei dati**\n   ```r\n   head(swls_scores)\n   tail(swls_scores)\n   ```\n   - `head()` mostra i primi 6 elementi, `tail()` gli ultimi 6.\n\n7. **Identificazione dei valori unici**\n   ```r\n   unique(swls_scores)\n   ```\n   - Restituisce: `7, 11, 15, 16, 20, 23, 25, 27`.\n\n8. **Creazione di una tabella con i dati**\n   ```r\n   df_swls <- data.frame(Studente = 1:10, Punteggio = swls_scores)\n   df_swls\n   ```\n\n9. **Esportazione dei dati**\n   ```r\n   write.csv(df_swls, \"swls_data.csv\", row.names=FALSE)\n   ```\n\n**Conclusione**\n\nQuesti esercizi hanno introdotto i comandi di base per creare, visualizzare e manipolare dati in R.\n:::\n\n::: {.callout-note collapse=true title=\"Informazioni sull'ambiente di sviluppo\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsessionInfo()\n#> R version 4.5.1 (2025-06-13)\n#> Platform: aarch64-apple-darwin20\n#> Running under: macOS Sequoia 15.6.1\n#> \n#> Matrix products: default\n#> BLAS:   /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRblas.0.dylib \n#> LAPACK: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.1\n#> \n#> locale:\n#> [1] C/UTF-8/C/C/C/C\n#> \n#> time zone: Europe/Rome\n#> tzcode source: internal\n#> \n#> attached base packages:\n#> [1] stats     graphics  grDevices utils     datasets  methods   base     \n#> \n#> other attached packages:\n#>  [1] pillar_1.11.0         tinytable_0.13.0      patchwork_1.3.2      \n#>  [4] ggdist_3.3.3          tidybayes_3.0.7       bayesplot_1.14.0     \n#>  [7] ggplot2_3.5.2         reliabilitydiag_0.2.1 priorsense_1.1.1     \n#> [10] posterior_1.6.1       loo_2.8.0             rstan_2.32.7         \n#> [13] StanHeaders_2.32.10   brms_2.22.0           Rcpp_1.1.0           \n#> [16] sessioninfo_1.2.3     conflicted_1.2.0      janitor_2.2.1        \n#> [19] matrixStats_1.5.0     modelr_0.1.11         tibble_3.3.0         \n#> [22] dplyr_1.1.4           tidyr_1.3.1           rio_1.2.3            \n#> [25] here_1.0.1           \n#> \n#> loaded via a namespace (and not attached):\n#>  [1] gridExtra_2.3         inline_0.3.21         sandwich_3.1-1       \n#>  [4] rlang_1.1.6           magrittr_2.0.3        multcomp_1.4-28      \n#>  [7] snakecase_0.11.1      compiler_4.5.1        systemfonts_1.2.3    \n#> [10] vctrs_0.6.5           stringr_1.5.1         pkgconfig_2.0.3      \n#> [13] arrayhelpers_1.1-0    fastmap_1.2.0         backports_1.5.0      \n#> [16] rmarkdown_2.29        ragg_1.5.0            purrr_1.1.0          \n#> [19] xfun_0.53             cachem_1.1.0          jsonlite_2.0.0       \n#> [22] broom_1.0.9           parallel_4.5.1        R6_2.6.1             \n#> [25] stringi_1.8.7         RColorBrewer_1.1-3    lubridate_1.9.4      \n#> [28] estimability_1.5.1    knitr_1.50            zoo_1.8-14           \n#> [31] pacman_0.5.1          R.utils_2.13.0        Matrix_1.7-4         \n#> [34] splines_4.5.1         timechange_0.3.0      tidyselect_1.2.1     \n#> [37] abind_1.4-8           codetools_0.2-20      curl_7.0.0           \n#> [40] pkgbuild_1.4.8        lattice_0.22-7        withr_3.0.2          \n#> [43] bridgesampling_1.1-2  coda_0.19-4.1         evaluate_1.0.5       \n#> [46] survival_3.8-3        RcppParallel_5.1.11-1 tensorA_0.36.2.1     \n#> [49] checkmate_2.3.3       stats4_4.5.1          distributional_0.5.0 \n#> [52] generics_0.1.4        rprojroot_2.1.1       rstantools_2.5.0     \n#> [55] scales_1.4.0          xtable_1.8-4          glue_1.8.0           \n#> [58] emmeans_1.11.2-8      tools_4.5.1           data.table_1.17.8    \n#> [61] mvtnorm_1.3-3         grid_4.5.1            QuickJSR_1.8.0       \n#> [64] colorspace_2.1-1      nlme_3.1-168          cli_3.6.5            \n#> [67] textshaping_1.0.3     svUnit_1.0.8          Brobdingnag_1.2-9    \n#> [70] V8_7.0.0              gtable_0.3.6          R.methodsS3_1.8.2    \n#> [73] digest_0.6.37         TH.data_1.1-4         htmlwidgets_1.6.4    \n#> [76] farver_2.1.2          memoise_2.0.1         htmltools_0.5.8.1    \n#> [79] R.oo_1.27.1           lifecycle_1.0.4       MASS_7.3-65\n```\n:::\n\n:::\n\n## Bibliografia {.unnumbered .unlisted}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}