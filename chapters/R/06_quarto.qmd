# Quarto {#sec-quarto}


## Introduzione {.unnumbered .unlisted}

La *crisi della riproducibilità* scientifica rappresenta una delle sfide più importanti della ricerca contemporanea. Con questo termine ci si riferisce alla difficoltà, riscontrata in diverse discipline, di replicare i risultati degli studi scientifici. Sebbene le definizioni di riproducibilità varino tra i diversi ambiti, un'interpretazione ampiamente condivisa la identifica come la capacità di ottenere gli stessi risultati utilizzando i medesimi dati di input e seguendo gli stessi passaggi computazionali nei metodi e nelle analisi.

La pratica scientifica è profondamente radicata nella formazione accademica: ciò che viene insegnato nelle aule universitarie si riflette direttamente nel lavoro svolto nei laboratori, sul campo e nell'analisi dei dati. Riconoscendo questo stretto legame tra didattica e ricerca, molti studiosi sostengono l'importanza di integrare i metodi di riproducibilità nei corsi universitari di data science, sia a livello undergraduate che graduate [@dogucu2024reproducibility]. L'educazione alla data science che incorpora la riproducibilità nell'analisi dei dati viene infatti considerata la "controffensiva statistica" alla crisi della riproducibilità.

In questo contesto si inserisce Quarto, uno strumento innovativo che affronta direttamente le sfide della crisi della riproducibilità. Quarto si colloca nella tradizione del *literate programming*, un approccio pioneristico introdotto da Donald Knuth negli anni '80. Questa metodologia nasce dalla visione di unificare codice e testo descrittivo in un unico documento, rendendo i programmi non solo eseguibili ma anche comprensibili agli esseri umani. L'obiettivo è superare la tradizionale separazione tra codice e documentazione, permettendo di spiegare non solo il funzionamento tecnico di un programma, ma anche le ragioni delle scelte implementative.

Questa filosofia risulta particolarmente pertinente nell'ambito della data science e dell'analisi statistica, dove riproducibilità e trasparenza sono requisiti imprescindibili. Quarto eccelle in questo contesto, offrendo la possibilità di integrare in codice, risultati e narrazione. La sua versatilità si manifesta nella capacità di produrre diversi tipi di output - dai report agli articoli scientifici, dalle presentazioni ai documenti tecnici - in vari formati come HTML, PDF e Word, combinando efficacemente testo interpretativo, risultati numerici e visualizzazioni grafiche.

Un punto di forza distintivo di Quarto è la sua flessibilità nel supportare molteplici linguaggi di programmazione, tra cui R, Python e Julia. Lo strumento può essere utilizzato secondo tre modalità principali: per presentare conclusioni condividendo i risultati senza esporre il codice sottostante; per documentare il processo analitico includendo sia il codice che i risultati, garantendo così piena trasparenza e riproducibilità; e per annotare l'analisi, integrando interpretazioni e motivazioni delle decisioni prese durante il processo analitico.

Nonostante Quarto sia tecnicamente uno strumento da riga di comando (CLI), l'integrazione con RStudio ne semplifica notevolmente l'utilizzo, rendendo l'installazione e l'operatività accessibili anche agli utenti meno esperti nell'uso del terminale. Questa caratteristica, unita alle sue potenti funzionalità, rende Quarto una naturale evoluzione del literate programming, offrendo un ambiente di lavoro che bilancia efficacemente praticità d'uso e rigore scientifico. In questo modo, Quarto si configura come una risposta concreta alle sfide della riproducibilità nella ricerca contemporanea, fornendo gli strumenti necessari per una scienza più trasparente e verificabile. L'obiettivo di questo capitolo è quello di fornire un'introduzione pratica a Quarto.


::: {.callout-tip collapse=true}
## Prerequisiti

- Leggere *Reproducibility in the Classroom* [@dogucu2024reproducibility].
- Leggere [An Introduction to R](https://intro2r.com/).
- Leggere [R for Data Science (2e)](https://r4ds.hadley.nz/).
- Leggere l'@sec-apx-latex-math.
:::

::: {.callout-caution collapse=true title="Preparazione del Notebook"}

```{r}
here::here("code", "_common.R") |> source()

# Load packages
if (!requireNamespace("pacman")) install.packages("pacman")
pacman::p_load(tidyr)
```
:::


### Creare un documento Quarto

Un file Quarto ha estensione `.qmd` e segue questa struttura:

![](../../figures/quarto_screenshot.png)

Questo file include: 

1. Un'intestazione YAML (metadati del documento).
2. Blocchi di codice delimitati da ```.
3. Testo scritto in Markdown con formattazioni semplici come titoli (`# Titolo`), corsivi (`*testo*`), ecc.


### Editor visivo e sorgente

- **Editor visivo**: simile a Google Docs, offre un'interfaccia WYSIWYM (What You See Is What You Mean). Consente di inserire facilmente immagini, tabelle, citazioni e altro.
- **Editor sorgente**: consente un controllo diretto sul Markdown, utile per debug e personalizzazioni avanzate.

### Blocchi di codice

I blocchi di codice (chiamati "chunks") eseguono codice e visualizzano i risultati. Ogni chunk è delimitato da ``` e può includere opzioni specifiche:

```r
#| label: esempio
#| echo: false
1 + 1
```

Le opzioni più comuni includono:

- `echo: false` (nasconde il codice nel report),
- `eval: false` (non esegue il codice),
- `message: false` e `warning: false` (nasconde messaggi o avvisi).

### Figure

Le figure possono essere generate tramite codice (es. `ggplot()`) o inserite come file esterni. Le opzioni più comuni per il controllo delle dimensioni sono:

- `fig-width` e `fig-height` (dimensioni della figura in pollici),
- `out-width` (percentuale di larghezza del documento),
- `fig-asp` (rapporto d’aspetto, es. 0.618 per il rapporto aureo).

Esempio:

```r
#| fig-width: 6
ggplot(data, aes(x, y)) + geom_point()
```

### Equazioni

Le equazioni possono essere scritte in LaTeX, così come spiegato nell'@sec-apx-latex-math.

### Tabelle

Le tabelle possono essere stampate direttamente o personalizzate con funzioni come `knitr::kable()` o pacchetti come `gt`:

```{r}
knitr::kable(head(mtcars))
```

### Caching

Per velocizzare i documenti con calcoli complessi, Quarto supporta la memorizzazione dei risultati:

- `cache: true` salva i risultati di un chunk, evitando di ricalcolarli se il codice non cambia.
- `dependson` specifica dipendenze tra chunk.

### Gestione delle Citazioni e delle Bibliografie in Quarto

Quarto offre un supporto avanzato per la generazione automatica di citazioni e bibliografie, consentendo l'applicazione di formati personalizzati come lo stile APA. Per includere riferimenti bibliografici, è necessario creare un file `.bib` (ad esempio, `references.bib`) contenente le citazioni nel formato BibTeX. Queste citazioni possono essere ottenute direttamente da Google Scholar o altri database accademici.

Ecco un esempio di una citazione in formato BibTeX:

```bibtex
@article{ceccarini2024age,
  title={Age-dependent changes in the anger superiority effect: Evidence from a visual search task},
  author={Ceccarini, Francesco and Colpizzi, Ilaria and Caudek, Corrado},
  journal={Psychonomic Bulletin \& Review},
  pages={1--10},
  year={2024},
  publisher={Springer}
}
```

Questa citazione deve essere inserita in un file `.bib`, ad esempio, `references.bib`. Tale file dovrà poi essere specificato nell'intestazione del documento Quarto.

#### Configurazione dell'Intestazione YAML

Nel file `.qmd`, è necessario aggiungere le seguenti righe all'intestazione YAML per collegare il file `references.bib` e configurare lo stile della bibliografia:

```yaml
bibliography: references.bib
biblio-style: apalike
csl: apa.csl
```

- **`bibliography`**: Specifica il percorso del file `.bib`. In questo esempio, si assume che il file si trovi nella stessa cartella del documento Quarto.
- **`biblio-style`**: Imposta lo stile delle citazioni. Ad esempio, `apalike` è uno stile simile allo stile APA.
- **`csl`**: Consente di utilizzare uno stile di citazione personalizzato, come `apa.csl`. Puoi scaricare facilmente questi stili dal [Zotero Style Repository](https://www.zotero.org/styles).

#### Esempio Completo

Di seguito è riportato un esempio completo di un documento Quarto che include una citazione e genera automaticamente la bibliografia:

```markdown
---
title: "Articolo di Esempio"
author: "Autore di Esempio"
date: "`r Sys.Date()`"
bibliography: references.bib
biblio-style: apalike
csl: apa.csl
---

## Introduzione

In questo articolo, discutiamo i cambiamenti dipendenti dall'età nell'anger-superiority effect [@ceccarini2024age].

## Risultati

I risultati mostrano che...

## Riferimenti
```

In questo esempio, l'identificatore `@ceccarini2024age` viene utilizzato per fare riferimento alla citazione contenuta nel file `references.bib`. Al momento della compilazione, Quarto genererà automaticamente la lista dei riferimenti bibliografici in base al formato specificato.

#### Citazioni Inline

All'interno di un documento `.qmd`, le citazioni vengono aggiunte utilizzando il simbolo `@` seguito dall'identificativo della citazione specificato nel file `.bib`. Ad esempio:

```markdown
... come evidenziato da @ceccarini2024age, si osserva che...
```

Quarto genera automaticamente la bibliografia, includendo solo i riferimenti effettivamente citati nel documento. La bibliografia viene aggiunta alla fine del file renderizzato (ad esempio, in formato HTML o PDF). 

Ad esempio, nel caso di un documento `.qmd`, il testo sopra sarà visualizzato così:

> ... come evidenziato da Ceccarini et al. (2024), si osserva che...

La citazione completa sarà inclusa automaticamente nella bibliografia, posizionata alla fine della pagina web o del documento finale. Si noti che Quarto gestisce automaticamente la formattazione e la posizione della bibliografia, garantendo coerenza e precisione. 

::: {#exm-}
Per fare un esempio pratico, possiamo inserire la citazione `@ceccarini2024age` direttamente nel file `.qmd` di questa pagina web. Quando il documento viene compilato, Quarto renderà la citazione in modo appropriato, come mostrato qui: @ceccarini2024age. 

Si noti che, in fondo a questa pagina web, è presente un riferimento bibliografico corrispondente. Questo riferimento è stato aggiunto automaticamente da Quarto in risposta all'uso della citazione `@ceccarini2024age` nel testo del documento. Questo processo automatizzato semplifica la gestione delle citazioni e garantisce che tutti i riferimenti siano correttamente inclusi e formattati.
:::


## Riflessioni conclusive {.unnumbered .unlisted}

Quarto è uno strumento potente per la creazione di documenti riproducibili e ben strutturati, integrando codice, risultati e testo descrittivo in un unico file. Questa introduzione dovrebbe essere sufficiente per iniziare a lavorare con Quarto, ma c’è ancora molto da imparare. Il modo migliore per rimanere aggiornati è consultare il sito ufficiale di Quarto: [https://quarto.org](https://quarto.org).

Un argomento importante che non abbiamo trattato qui riguarda i dettagli di come comunicare in modo accurato le proprie idee agli altri. Per migliorare le proprie capacità di scrittura, @wickham2023r consigliano due libri: *Style: Lessons in Clarity and Grace* di Joseph M. Williams & Joseph Bizup, e *The Sense of Structure: Writing from the Reader’s Perspective* di George Gopen. Una serie di brevi articoli sulla scrittura sono offerti da George Gopen e sono disponibili su [https://www.georgegopen.com/litigation-articles.html](https://www.georgegopen.com/litigation-articles.html). 


::: {.callout-tip title="Esercizio" collapse="true"}
In questo esercizio esplorerai l'importanza della riproducibilità nella scienza dei dati e le funzionalità principali di Quarto. 

**1. Concetti di base sulla riproducibilità**

1. Cos’è la *crisi della riproducibilità* e perché è rilevante nella scienza dei dati?
2. In che modo Quarto può aiutare ad affrontare la crisi della riproducibilità?
3. Spiega il concetto di *literate programming* e come si collega a Quarto.

**2. Struttura di un file Quarto**

4. Qual è l'estensione di un file Quarto e quali sono le sue tre sezioni principali?
5. Qual è la differenza tra *editor visivo* ed *editor sorgente* in Quarto?
6. Qual è la funzione dell’intestazione YAML in un file `.qmd`?

**3. Blocchi di codice e opzioni**

7. Come si scrive un blocco di codice in Quarto?
8. Quali opzioni puoi utilizzare nei blocchi di codice per controllare l’esecuzione e la visualizzazione del codice e dei risultati?
9. Scrivi un blocco di codice Quarto che calcola la media di un vettore di numeri e stampa il risultato senza mostrare il codice.

**4. Figure e Tabelle**

10. Quali opzioni di formattazione delle figure offre Quarto? 
11. Come puoi creare una tabella formattata in Quarto usando `knitr::kable()`?

**5. Citazioni e Bibliografia**

12. Come si aggiunge una citazione bibliografica in Quarto?
13. Quali file devono essere inclusi per gestire una bibliografia in Quarto?
14. Scrivi un esempio di citazione in formato BibTeX e mostra come collegarla a un documento `.qmd`.

**6. Considerazioni Finali**

15. Quali sono i vantaggi di usare Quarto rispetto a strumenti più tradizionali come Word per la creazione di report scientifici?
:::

::: {.callout-tip title="Soluzione" collapse="true"}
**1. Concetti di base sulla riproducibilità**

1. La *crisi della riproducibilità* è il fenomeno per cui molti studi scientifici non possono essere replicati con gli stessi metodi e dati. Questo mina la fiducia nella scienza e può portare a risultati non affidabili.
2. Quarto aiuta la riproducibilità integrando codice, testo e risultati in un unico documento, rendendo più semplice verificare e riprodurre le analisi.
3. *Literate programming* è un approccio introdotto da Donald Knuth che combina codice e spiegazioni testuali nello stesso file, migliorando la comprensione e documentazione delle analisi. Quarto segue questa filosofia.

**2. Struttura di un file Quarto**

4. L'estensione di un file Quarto è `.qmd`. Le tre sezioni principali sono:

   - L'intestazione YAML (metadati),
   - Il codice (chunks),
   - Il testo scritto in Markdown.
   
5. L'*editor visivo* è un’interfaccia intuitiva simile a Google Docs, mentre l'*editor sorgente* permette di scrivere direttamente in Markdown e codice.
6. L'intestazione YAML definisce le proprietà del documento come titolo, autore, formato di output e opzioni di rendering.

**3. Blocchi di codice e opzioni**

7. Un blocco di codice in Quarto si scrive con tripli backtick (\```) e un linguaggio specificato:

   ```r
   #| echo: true
   print("Esempio di codice in Quarto")
   ```
8. Alcune opzioni utili nei blocchi di codice sono:

   - `echo: false` per nascondere il codice,
   - `eval: false` per non eseguire il codice,
   - `warning: false` e `message: false` per nascondere messaggi e avvisi.
   
9. Esempio di blocco di codice che calcola una media senza mostrare il codice:

   ```r
   #| echo: false
   mean(c(1, 2, 3, 4, 5))
   ```

## 4. Figure e Tabelle
10. Le opzioni principali per le figure includono:

    - `fig-width` e `fig-height` per le dimensioni,
    - `out-width` per la larghezza relativa,
    - `fig-asp` per il rapporto d’aspetto.
    
11. Per creare una tabella formattata con `knitr::kable()`:

    ```r
    knitr::kable(head(mtcars))
    ```

**5. Citazioni e Bibliografia**

12. Le citazioni in Quarto si aggiungono usando il simbolo `@` seguito dal riferimento BibTeX (es. `@ceccarini2024age`).
13. Per gestire la bibliografia in Quarto servono:

    - Un file `.bib` con le citazioni,
    - Un’intestazione YAML che collega il file `.bib` e specifica lo stile (`csl`).
    
14. Esempio di citazione BibTeX e collegamento in YAML:

    ```bibtex
    @article{ceccarini2024age,
      title={Age-dependent changes in the anger superiority effect},
      author={Ceccarini, Francesco et al.},
      journal={Psychonomic Bulletin & Review},
      year={2024}
    }
    ```
    
    YAML:
    
    ```yaml
    bibliography: references.bib
    biblio-style: apalike
    ```

**6. Considerazioni Finali**

15. I vantaggi di Quarto rispetto a Word includono:

    - maggiore riproducibilità e trasparenza,
    - possibilità di integrare codice ed esecuzione in un unico documento,
    - facilità di gestione delle citazioni automatiche,
    - supporto per diversi formati di output (HTML, PDF, Word).
    
:::

::: {.callout-note collapse=true title="Informazioni sull'ambiente di sviluppo"}
```{r}
sessionInfo()
```
:::

## Bibliografia {.unnumbered .unlisted}
