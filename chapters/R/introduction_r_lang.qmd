# R {.unnumbered}

## Scrivere Codice

La programmazione si fonda su un approccio strutturato che combina **logica computazionale** e **strumenti tecnici**, articolandosi su due piani complementari: il livello **algoritmico** e il livello **sintattico**.

### Livello algoritmico: l'astrazione del problema  

In questa fase, si definisce la soluzione concettuale indipendentemente dal linguaggio, attraverso:  

1. analisi degli input; 
2. specifica dell'output;  
3. progettazione dell'algoritmo.  

Per esempio, l'input può essere costituito da un insieme di valori numerici; l'output può corrispondere alla media aritmetica; l'algorimo può essere formalizzato come: 

$$
\text{media} = \frac{\sum_{i=1}^{n} x_i}{n} .
$$  

Questo processo richiede capacità di problem solving e modellizzazione astratta, competenze trasversali a qualsiasi linguaggio.

### Livello sintattico: l'implementazione pratica  

La soluzione algoritmica viene poi tradotta in codice seguendo le regole specifiche del linguaggio scelto:  

**Esempio in R**  
```R
media <- sum(x) / length(x)
```

**Esempio in Python**  
```python
media = sum(x) / len(x)
```  

Pur mantenendo la stessa logica, le differenze sintattiche evidenziano come l'implementazione sia vincolata allo strumento utilizzato.

## Priorità formative nell'era dell’IA

Nell’attuale contesto tecnologico dominato dall’intelligenza artificiale, la formazione nella programmazione richiede una ridefinizione delle priorità. Abbiamo visto come sia necessario distinguere tra due dimensioni: da un lato, la capacità di pensare algoritmicamente, ossia l’abilità di scomporre problemi complessi in passaggi logici e astratti; dall’altro, la padronanza della sintassi, ovvero delle regole specifiche dei linguaggi di programmazione.  

Il **pensiero algoritmico** rappresenta il cuore creativo e critico della programmazione. È ciò che permette di trasformare un problema in una sequenza ordinata di operazioni risolutive. Questa competenza, radicata nella logica e nell’astrazione, rimane un dominio squisitamente umano: per quanto avanzate, le IA non possono sostituire la capacità di formulare domande pertinenti, riconoscere pattern originali o immaginare soluzioni innovative. Senza questa base concettuale, ogni tentativo di risolvere problemi computazionali sarebbe destinato a fallire, anche con gli strumenti più potenti a disposizione.  

La **sintassi computazionale**, sebbene necessaria, assume oggi un ruolo diverso. Strumenti di code generation, stanno democratizzando l’accesso alla scrittura del codice: piattaforme intelligenti possono suggerire implementazioni, correggere errori e persino tradurre algoritmi tra linguaggi diversi [@cooper2024harnessing]. Gli errori sintattici – un tempo ostacoli insormontabili per i principianti – diventano sempre più correggibili attraverso l’esperienza o l’automazione.  

Questa gerarchia di competenze riecheggia il framework teorico di Marr, sviluppato nel campo della visione artificiale. Marr distingue tre livelli di analisi: il *“perché”* del sistema (l’obiettivo computazionale), il *“come”* logico (la progettazione algoritmica) e il *“con cosa”* concreto (l’implementazione fisica). Nell’educazione alla programmazione, questo si traduce in una scelta precisa: privilegiare la progettazione consapevole di algoritmi rispetto alla mera esecuzione tecnica.  

La priorità formativa diventa quindi chiara. Coltivare il pensiero algoritmico significa allenare quella *mentalità progettuale* che permette di dialogare in modo critico con l’IA: formulare prompt efficaci richiede prima di tutto di comprendere a fondo la struttura del problema; valutare soluzioni proposte dall’intelligenza artificiale presuppone la capacità di riconoscere logiche difettose o approcci subottimali. Allo stesso tempo, questa competenza agisce come un “sesto senso tecnologico”, permettendo di adattarsi a linguaggi e strumenti in continua evoluzione.  

La sintassi non viene certo abbandonata, ma contestualizzata. L’automazione non sostituisce l’apprendimento, ma lo rende più strategico: invece di memorizzare comandi, si impara a selezionarli e combinarli in modo funzionale agli obiettivi algoritmici.  

## R: Uno Strumento per l'Analisi dei Dati

Per trovare la soluzione concreta a un problema di analisi dei dati, è necessario implementare l'algoritmo desiderato in un linguaggio di programmazione. In questo insegnamento, utilizzeremo **R**, uno dei linguaggi più utilizzati per l’analisi dei dati, apprezzato per la sua flessibilità, potenza e il supporto offerto da una vasta comunità di utenti e sviluppatori.

### Perché R?

- **Nato per l'analisi statistica**: R è stato concepito specificamente per rispondere alle esigenze di analisi statistica e visualizzazione grafica, diventando rapidamente uno strumento essenziale nel panorama accademico e scientifico.
- **Gestione dei dati**: R offre strumenti avanzati per gestire, manipolare e analizzare grandi quantità di dati, coprendo un'ampia gamma di tecniche statistiche, dalla modellazione lineare all'analisi delle serie temporali.
- **Visualizzazione grafica**: Con pacchetti come `ggplot2` e `plotly`, R permette di creare grafici e visualizzazioni di alta qualità, fondamentali per comunicare risultati in modo efficace.
- **Comunità e pacchetti**: L'ecosistema di R è arricchito da una vasta libreria di pacchetti, che estendono le capacità del linguaggio per soddisfare necessità specifiche e settoriali.

### R in Psicologia e nelle Scienze Sociali

Nato come linguaggio dedicato alla statistica, R si è evoluto fino a diventare un punto di riferimento per psicologi, ricercatori e professionisti impegnati nella valutazione psicometrica, nell’analisi del comportamento e nella modellizzazione di dati complessi. La sua flessibilità, unita alla vastissima collezione di pacchetti specifici, lo rende adatto a molteplici applicazioni in psicologia, dalla costruzione e validazione di test alla gestione di dati provenienti da studi sperimentali, longitudinali ed *Ecological Momentary Assessment* (EMA).  

## Riflessioni Conclusive

Imparare ad usare R non significa solo acquisire competenze tecniche, ma anche aprire le porte a nuove possibilità di analisi e ricerca. Tuttavia, è fondamentale ricordare che la vera sfida nella programmazione non è padroneggiare la sintassi di un linguaggio specifico, ma comprendere la **logica algoritmica** che sta alla base della soluzione di un problema. L'IA può aiutarci a trovare la sintassi corretta, ma spetta a noi decidere quale algoritmo implementare. Pertanto, i nostri sforzi devono essere rivolti a capire la logica del problema, piuttosto che concentrarci esclusivamente sull'implementazione sintattica.

## Bibliografia {.unnumbered}

