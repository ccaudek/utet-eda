# Utility functions {#sec-r-programming}


## Introduzione {.unnumbered .unlisted}

In questo capitolo, esploreremo le principali funzioni di utilità in R per l'importazione di dati da file esterni e la raccolta di statistiche descrittive, fornendo una panoramica generale sui data frame.


### Panoramica del capitolo {.unnumbered .unlisted}

- Conoscere e sapere utilizzare le principali funzioni di utilità di R.
- Sapere come importare un data set in R e esportare un data set in un file esterno.
- Usare i percorsi relativi rispetto alla radice del progetto con `here::here()`.

::: {.callout-tip collapse=true}
## Prerequisiti

- Consultare [Introduction to Data Science: Data Wrangling and Visualization with R](https://rafalab.dfci.harvard.edu/dsbook-part-1/) [@irizarry2024introduction]
- Leggere [R for Data Science (2e)](https://r4ds.hadley.nz/) [@wickham2023r].
:::

::: {.callout-caution collapse=true title="Preparazione del Notebook"}

```{r}
here::here("code", "_common.R") |> 
  source()

# Load packages
if (!requireNamespace("pacman")) install.packages("pacman")
pacman::p_load(tidyr)
```
:::



## Importare dati in R con `rio::import()`

Prima di analizzare i dati, è necessario importarli in R. 

### Il problema: Tanti Formati, un'Unica Soluzione

Nella ricerca psicologica i dati possono essere forniti in molti formati:

- File Excel (`.xlsx`) da questionari compilati in laboratorio,
- CSV (`.csv`) da piattaforme online come Qualtrics,
- File SPSS (`.sav`) per confrontare studi precedenti,
- Solo testo (`.txt`) da esperimenti comportamentali.

Invece di imparare funzioni diverse, una specifica per ciascun formato, il pacchetto **rio** offre **un solo comando universale** per le importazioni.

### Come Funziona `import()`

```r
# Carica il pacchetto (installalo prima con install.packages("rio"))
library(rio)

# Importa un file CSV da una cartella "dati" nel tuo progetto
risposte <- rio::import("dati/questionario.csv")

# Importa un foglio Excel con i tempi di reazione
tempi_reazione <- rio::import("dati/esperimento1.xlsx")

# Importa un file SPSS con dati demografici
dati_demografici <- rio::import("dati/partecipanti.sav")
```

**Perché è utile:**

1. riconosce **automaticamente** il formato dal nome del file;
2. traduce i dati in un formato R pronto per l'analisi (`data.frame`);
3. conserva le etichette delle variabili (cruciale per questionari!).

### Esportare Dati con `rio::export()`

Dopo aver pulito i dati, è possibile salvarli in qualsiasi formato usando `rio::export()`:

```r
rio::export(risposte, "dati/cleaned/dati_puliti.xlsx")
rio::export(tempi_reazione, "dati/cleaned/tempi_reazione.sav")
```

## Utilizzare Percorsi Relativi con `here::here()`

Quando importiamo i dati da file esterni in R, succede spesso di commettere uno dei tre errori seguenti. Vediamo come eviarli.

1. **Percatori sbagliati**  

   ```r
   # SBAGLIATO (il file non è nella cartella di lavoro)
   import("questionario.csv")  

   # CORRETTO: usa percorsi relativi o il pacchetto 'here'
   import("dati/raw/questionario.csv")  
   ```

2. **File aperti in altri programmi**  
   "Errore: non posso aprire il file" → Chiudi Excel/SPSS e riprova

3. **Codifica caratteri strani**  
   Se vedi � nei testi, specifica l'encoding:
   
   ```r
   import("dati/testo.txt", encoding = "UTF-8")
   ```

### Evitare Percorsi Assoluti

Come vedremo meglio nel @sec-eda-proj-structure, il primo passo di un progetto di analisi dei dati è l'organizzazione dei file in cartelle con una struttura chiara:

   ```
   tuo_progetto/
   ├── dati/
   │   ├── raw/        # Dati originali
   │   └── cleaned/    # Dati elaborati
   ├── script/
   └── rapporti/
   ```

**Tutti i file e le cartelle devono essere contenuti nella directory del progetto.**

Il pacchetto **here** rende l'importazione dei dati più semplice, evitando problemi dovuti a percorsi assoluti che possono cambiare se si modifica la directory di lavoro o si sposta il progetto.

La funzione `here()` crea **percorsi relativi a partire dalla radice del progetto** (cioè dalla cartella che contiene il file `.Rproj` o da dove viene inizializzato il progetto RStudio).

**Esempio di utilizzo combinato con `rio::import()`:**

```r
library(rio)
library(here)

# Percorso robusto al file csv
dati <- import(here("data", "dati.csv"))

# Percorso robusto al file Excel
dati_excel <- import(here("data", "dati.xlsx"))
```

In questo modo, l'importazione diventa indipendente dalla cartella di lavoro attuale e il codice sarà più facilmente condivisibile e riproducibile.

**Vantaggi:**

- **Semplicità**: `rio::import()` riconosce automaticamente il tipo di file.
- **Robustezza**: `here::here()` garantisce che il percorso sia sempre corretto, indipendentemente da dove viene eseguito lo script.

Questa combinazione rende le analisi riproducibili e consente di collaborare facilmente con altri ricercatori o studenti.

## Funzioni Principali e Loro Utilizzo

R offre una serie di funzioni per esplorare rapidamente i dati e comprenderne la struttura prima di passare a manipolazioni più avanzate.

| **Funzione** | **Descrizione** |
|--------------|-----------------|
| `summary()`  | Restituisce statistiche descrittive di base per ogni colonna di un data frame. Per le colonne numeriche, calcola valori come il minimo, massimo, media, mediana, primo e terzo quartile, e il numero di valori mancanti (se presenti). Per le colonne non numeriche, restituisce il tipo di dati (carattere, logico) e il conteggio delle categorie. **Esempio:** `summary(iris)` restituisce una sintesi delle colonne del dataset `iris`. |
| `str()` e `glimpse()` | Forniscono una rappresentazione sintetica delle informazioni di un data frame, come dimensione, nomi delle colonne, tipi di dati e valori iniziali. La funzione `str()` fa parte della configurazione base di R (pacchetto `utils`), mentre `glimpse()` è inclusa in `dplyr` (pacchetto `tidyverse`). **Esempio:** `str(mtcars)` o `glimpse(mtcars)`. |
| `head()` e `tail()` | Permettono di visualizzare rispettivamente le prime o ultime righe di un data frame. Utile per una rapida ispezione del contenuto. Si può specificare il numero di righe da mostrare (es. `head(df, 10)`), altrimenti il valore predefinito è sei righe. **Esempio:** `head(iris)` per vedere le prime righe del dataset `iris`. |
| `View()` e `view()` | Visualizzano un data frame in una finestra grafica tipo foglio di calcolo all'interno di RStudio. La funzione `View()` è parte della configurazione base di R, mentre `view()` è un alias fornito da `tibble` (pacchetto `tidyverse`). Utile per piccoli data frame, ma poco pratico per dataset di grandi dimensioni. **Esempio:** `View(iris)` apre il dataset `iris` nel visualizzatore di RStudio. |
| `unique()`  | Restituisce i valori unici presenti in una colonna o in un vettore. **Esempio:** `unique(iris$Species)` restituisce le specie uniche nel dataset `iris`. |
| `names()`  | Restituisce i nomi delle colonne di un data frame. **Esempio:** `names(mtcars)` restituisce i nomi delle colonne del dataset `mtcars`. |
| `class()`  | Indica il tipo di dato di un oggetto in R, come `numeric`, `character`, `logical`, o `data.frame`. **Esempio:** `class(iris)` restituisce `data.frame`. |
| `length()`  | Restituisce il numero di elementi di un oggetto. Per i data frame, restituisce il numero di colonne. **Esempio:** `length(iris)` restituisce 5 (colonne). |
| `nrow()` e `ncol()` | Restituiscono rispettivamente il numero di righe e colonne di un data frame. **Esempio:** `nrow(iris)` restituisce 150 (righe), mentre `ncol(iris)` restituisce 5 (colonne). |


## Illustrazione

Immagina di dover analizzare i dati del tuo esperimento sul sonno e la memoria, salvati nel file `msleep.csv`. La struttura del tuo progetto RStudio è organizzata così:

```
mio_esperimento/
├── mio_esperimento.Rproj
├── data/
│   └── msleep.csv
├── script/
│   └── analisi.R
└── output/
```

La prima cosa da fare è caricare i pacchetti necessari:

```r
library(rio)    # Per importare i dati
library(here)   # Per gestire i percorsi in modo affidabile
```

A questo punto possiamo importare i dati:

```{r}
msleep <- rio::import(
  here::here(  # Costruisce il percorso automaticamente
    "data",    # Cartella dei dati
    "msleep.csv"  # Nome del file
  )
)
```

Controlli post-importazione (fondamentali!)

```{r}
head(msleep)
```

```{r}
str(msleep)
```

```{r}
glimpse(msleep)
```

```{r}
names(msleep)
```

```{r}
dim(msleep)
```

**Errori comuni e soluzioni.**

1. **"File not found"**:
   - Verifica che:
     - il file sia realmente in `data/`;
     - il nome del file sia esatto (attenzione a .csv vs .CSV);
     - **non ci siano spazi nel nome del file**.

2. **Pacchetti non installati**:
   ```r
   # Esegui una volta
   install.packages("rio")
   install.packages("here")
   ```

3. **Progetto non aperto**:
   - Assicurati di aver aperto il file `.Rproj` prima di iniziare.


Esaminiamo le modalità della variabile qualitativa `vore`:

```{r}
unique(msleep$vore)
```

Se vogliamo la numerosità di ciascuna categoria, possiamo usare `table()`:

```{r}
table(msleep$vore)
```

Si noti che `table()` esclude i dati mancanti.

Stampiamo i nomi delle colonne del data frame:

```{r}
names(msleep)
```

Esaminiamo il tipo di variabile della colonna `vore`:

```{r}
class(msleep$vore)
```

Le dimensioni del data frame sono date da:

```{r}
dim(msleep)
```

laddove il primo valore è il numero di righe e il secondo valore è il numero di colonne.

Il numero di elementi di un vettore è dato da:

```{r}
length(msleep$vore)
```

In alternativa, possiamo usare `nrow()`

```{r}
nrow(msleep)
```

per il numero di righe e `ncol()`

```{r}
ncol(msleep)
```

per il numero di colonne. In maniera equivalente:

```{r}
dim(msleep)[2]
```


::: {.callout-tip title="Esercizio" collapse="true"}
In questo esercizio, utilizzerai R per esplorare i dati raccolti con il questionario **Satisfaction With Life Scale (SWLS)** dagli studenti del tuo gruppo TPV. L'obiettivo è familiarizzare con le funzioni di base di R per caricare, visualizzare e manipolare i dati.

**Parte 1: Operazioni Manuali**

1. **Creazione e gestione degli oggetti in R**  
   - Scrivi su carta i comandi R che creerebbero un oggetto chiamato `swls_scores` contenente i punteggi di 10 studenti.
   - Quali sono le regole per assegnare un nome a un oggetto in R?

2. **Visualizzazione dei dati**  
   - Scrivi il comando R per visualizzare il contenuto dell’oggetto `swls_scores`.
   - Come puoi visualizzare solo i primi 5 valori del vettore?

3. **Esplorazione della struttura dei dati**  
   - Scrivi i comandi R per verificare il tipo di dati contenuti in `swls_scores`.
   - Come puoi verificare quanti elementi contiene?

**Parte 2: Esecuzione in R**

4. **Creazione del dataset in R**  
   - Inserisci i dati in un oggetto chiamato `swls_scores` in R.

5. **Verifica della struttura dei dati**  
   - Usa le funzioni `str()`, `class()`, `length()`, `nrow()`, `ncol()` su `swls_scores`.
   - Annota i risultati e spiega a parole loro significato.

6. **Visualizzazione dei dati**  
   - Usa `head()` e `tail()` per esplorare i dati.  
   - Qual è la differenza tra le due funzioni?

7. **Identificazione dei valori unici**  
   - Usa `unique(swls_scores)` per individuare i punteggi distinti.

8. **Creazione di una tabella con i dati**  
   - Trasforma `swls_scores` in un data frame con una colonna `"Punteggio"` e una colonna `"Studente"` (numerata da 1 a 10).

9. **Esportazione dei dati**  
   - Salva il data frame in un file CSV chiamato `"swls_data.csv"` usando `write.csv()`.

**Consegna**

- Scrivi le risposte della **Parte 1** su carta.
- Scrivi il codice e i risultati della **Parte 2** in un file `.R` e invialo come consegna.
:::

::: {.callout-tip title="Soluzione" collapse="true"}
**Parte 1: Operazioni Manuali**

1. **Creazione e gestione degli oggetti in R**  
   - Consideriamo dei valori di risposta arbitrari. Il comando per creare l’oggetto `swls_scores` è:

     ```r
     swls_scores <- c(20, 16, 23, 25, 11, 7, 20, 25, 15, 27)
     ```

   - Regole per assegnare un nome a un oggetto in R:
     - Non può iniziare con un numero.
     - Non può contenere spazi o caratteri speciali (tranne `_` e `.`).
     - Non deve avere lo stesso nome di funzioni già esistenti.

2. **Visualizzazione dei dati**  
   - Per visualizzare il contenuto:

     ```r
     swls_scores
     ```

   - Per visualizzare solo i primi 5 valori:

     ```r
     head(swls_scores, 5)
     ```

3. **Esplorazione della struttura dei dati**  
   - Per verificare il tipo di dati:

     ```r
     class(swls_scores)
     ```

   - Per verificare il numero di elementi:

     ```r
     length(swls_scores)
     ```

**Parte 2: Esecuzione in R**

4. **Creazione del dataset in R**
   ```r
   swls_scores <- c(20, 16, 23, 25, 11, 7, 20, 25, 15, 27)
   ```

5. **Verifica della struttura dei dati**
   ```r
   str(swls_scores)
   class(swls_scores)
   length(swls_scores)
   ```

   - `str()` mostra che `swls_scores` è un vettore numerico.
   - `class()` conferma che è di tipo `"numeric"`.
   - `length()` indica che il vettore ha 10 elementi.

6. **Visualizzazione dei dati**
   ```r
   head(swls_scores)
   tail(swls_scores)
   ```
   - `head()` mostra i primi 6 elementi, `tail()` gli ultimi 6.

7. **Identificazione dei valori unici**
   ```r
   unique(swls_scores)
   ```
   - Restituisce: `7, 11, 15, 16, 20, 23, 25, 27`.

8. **Creazione di una tabella con i dati**
   ```r
   df_swls <- data.frame(Studente = 1:10, Punteggio = swls_scores)
   df_swls
   ```

9. **Esportazione dei dati**
   ```r
   write.csv(df_swls, "swls_data.csv", row.names=FALSE)
   ```

**Conclusione**

Questi esercizi hanno introdotto i comandi di base per creare, visualizzare e manipolare dati in R.
:::

::: {.callout-note collapse=true title="Informazioni sull'ambiente di sviluppo"}
```{r}
sessionInfo()
```
:::

## Bibliografia {.unnumbered .unlisted}
